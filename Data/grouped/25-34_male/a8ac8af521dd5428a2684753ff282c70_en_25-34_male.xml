 openArchitectureWare. As you can see at the project's wiki site , I am almost finished implementing the required features. I implemented a protoypic eclipse integration using the Language Toolkit (LTK) first. This was (and still is :)) a prototype, since I wanted to focus my efforts on the algorithms the whole refactoring is based on. The UI sugar comes later ;). The implementation was easier than I thought. I became aquainted with the oAW source quickly, although it is commented very very raley :D. Very helpful were the Eclipse Type Hierarchy and Call Hierarchy . The Call Hierarchy is your perfect buddy for figuring out, how an API works. A screencast showing the refactorings Rename Extension and Rename DEFINE can be found here (.flv 22.6 mb). Note that it is in german .. it was not meant to be published .. just a little status report for my gsoc mentor peter .. but if you cannot wait to see the refacorings in action, go for it! I will publish another screen cast with even more cool features the coming days. I planned to finish the implementation of the refactoring algorithms by the end of this week. Right now I am working on the Move Extension feature. If this feature is implemented, I will take some days to clean up the code and make the abstractions clearer. Then I will start working on the user experience .. precondition checking, meaningful dialogs etc.]] here are news from the oaw code frontier. I finished implementing the move extension and rename resource feature. the move extension feature was trickier than I thought .. you not only have to delete the extension from the source file and insert it into the target file, you have to check which namespace and extensions are required to get the moved extension running within the target xtend file and you have to determine where to insert each import. I had a lot of MalformedTreeExceptions meaning that the insertions of new imports overlap or the inserted extension is not inside the document range :@! the tricky part of the calculation of the import offsets, the positions each import shall be inserted at, is the differentiation of different cases: is the target file empty, does it contain imports only, does it contain imports and extensions .. my code was covered with ugly nested, not understandable if-statements. to come up with this mess, I used the Strategy Pattern. the gof book says that it should be applied, if "different algorithms will be appropriate at different times". my base strategy class handles the common operations for the movement of an extension: remove the extension from the source file, update imports in all other files etc. it contains an abstract method called " createTargetFileChanges ", which has to be overridden by subclasses implementing a different insertion strategy. according to the target file's state, an appropriate strategy is chosen. the code is much clearer now and new cases can be handled (added) easier. A screencast showing the implemented features in action can be found here (.avi, 24.2 mb). the ui looks a little bit inconsistent and unhandy .. this is my next implementation step. I could not work that much the last days, since I got my admission for the master program at the hasso-plattner-institute for software systems engineering (YESSSS!) and I had to do a lot of administrative stuff .. get rid of my old flat, leave my old university. I planned to submit a paper about the modeling tool and distributed model simulation environment for information retrieval processes developed during my bachelor thesis to the mdsd today conference , but due to the upcoming gsoc deadline I will not have the time for writing one :(. So, during the next days I will focus my implementation efforts on the ui aspects of the oaw refactoring feature and finally I will test it using a real life oaw project. stay tuned! steven]] ANTLR and Micosoft's Phoenix framework I have to write a lot of C# code that lends itself to be generated. Besides the need for a java grammar, which can be found here , we need an AST (Abstract Syntax Tree) to accomplish the semantic analysis. ANTLR offers an AST construction mechanism and generates an AST walker from a tree grammar. Basically the semantic analysis can be done solely with ANTLR. But, we are facing the challenge that each teammate needs to work with the AST and not everyone knows ANTLR. Thus we need an ANTLR independent AST. The basis of our Java AST is the Eclipse JDT AST . My task is to implement the AST using C#. So, to implement means to copy since the JDT AST seems be a good model. Did I say model? This sounds like feeding the JDT AST code into a code generator and letting the generator create the C# implementation. Consequently we create a generator using openArchitectureWare that will take an UML2 class model, yes we decided to create an UML model of the AST ;), and generate C# classes. I sat down with a teammate having C# experiences to create the generator templates for generating C# code. Perfect! Now, our generator knows how to create C# classes .. and my teammate can go home :D. Furthermore we generate the basic visitor code for the AST from its model. By the way .. a language grammar lends itself to automatic AST generation .. check out this paper . Generators are knowledge containers! steven]] hi folks, I found an example application for Eclipse CDO . And I describe how to get it running. Download the latest Eclipse Modeling Tools: from Eclipse download choose Development Builds to get the latest tools. Fortunately, the site lets you know, that there are some problems for mac users with the 3.5M7 release. One problem is that there is no 'dropins' folder; but I will show you how we can bypass this problem (creating a folder named 'dropins' does not work :( ). Go get the Modeling tools! Additionally you need: the latest builds of CDO vers. 2.x (not 1.09!), Net4J vers. 2.x (not 1.09!), and Teneo . Download them, create a folder 'CDO_runtime' and copy all plugins found in the CDO, Net4j and Teneo builds into this folder. Next, save the Team Project Set file as 'cdo_example.psf' Now, start Eclipse of your Modeling Tools. In the Package Explorer right click- Import... -Team-Team Project Set and choose 'cdo_example.psf'. The next step is to add the cdo, net4j and teneo plugins to the Eclipse runtime. Normally, you do that by throwing them into Eclipse's 'dropin' folder which is absent in the current os x build. Therefore, we create a new Target Definition . Choose one of the CDO example projects, press CMD+N, choose Plug-in Development-Target Definition and name the file 'cdo_target'. Open the created 'cdo_target.target' file. In the upcoming editor press Add... , choose Installation-Next , type '${eclipse_home}' as location and press Finish . Now, we add our 'CDO_runtime' folder as location; so again press Add... , then choose Directory-Next , browse to this folder and press Finish . Finally, press Set as Target Platform in the upper right of the editor. At this point, all required plugins for the CDO example are installed. If you want to change your target platform back to the original Eclipse installation, open the preferences (CMD+,), choose Plug-in Development-Target Platform and select Running Platform . I did not have the time to play around with the example .. the installation took sooo long ;). I will post after further investigations have been done. Happy experimenting with CDO! greetzn, steven]] these days I was having problems with my CDO server: after inserting some models into a repository, and then restarting the server, I was getting this error: [ERROR] Rollback in DBStore: org.eclipse.net4j.db.DBException: SQL Exception: A lock could not be obtained within the time requested First, I thought, I forgot to commit/close a transaction; but this was not the case. In the emf news group, eike told me, that there was a similar problem in the tests based on apache derby. So, I switched to H2 , and the error did not occur anymore. I was desperately looking for the net4j H2Adapter in the latest net4j releases but was not able to find it. Finally, I found it here , copied to my workspace, and changed the creation of the IStore: org.h2.jdbcx.JdbcDataSource dataSource = new JdbcDataSource(); dataSource.setURL("jdbc:h2:~/h2Test"); IDBAdapter dbAdapter = new H2Adapter(); IMappingStrategy mappingStrategy = CDODBUtil.createHorizontalMappingStrategy(true); IDBConnectionProvider dbConnectionProvider = DBUtil.createConnectionProvider(dataSource); IStore store = CDODBUtil.createStore(mappingStrategy, dbAdapter, dbConnectionProvider); cheers, steven]] Hello, I need to create an eclipse plug-in project at runtime but don't know how! I think about reusing the New-Plug-in wizard , but after almost three hours of tweaking this wizard to fit my needs, I decided to do on my own! But wait, coding all this stuff .. create source folder, manifest folder, manifest file, plugin.xml file ... too much .. can't someone else do it?! praise opensource! I remember that oaw generates an eclipse-plug-in for you if you create a new oaw project. I go through oaw's cvs and find this promising class . After some minor modifications, e.g. removing the dependency to 'org.openarchitectureware.dependencies' in its createManifest(...) method, it does a perfect job! So, go get this class , adapt it to your needs and generate eclipse plug-in projects at runtime! bye, steven ]] I was looking for prices of internet domains, and found some numbers on this site . compare the rankings of .de (german domains) and .com domains. if you list the three most expensive .com domain names, you get this list: sex porn business for .de domains you get this one: kredit poker kasino If we assume that a domain price is a monetization of attention, we can interpret these list as follows: most of germany's attention can be caught on gambling sites, and of course on sites giving credit to player's. germans have no sex, just gambling they do not care about business, just gambling surprising: they do not care about unemployment, just gambling the rest of the world: is doing business otherwise just .. always trust the numbers! best, steven P.S. Sorry dear google user if you landed on this blog while searching for satisfaction! some words in this post do not have a common semantic ..]] This is a list of themes that will catch my attention during this semester: Protocol Compiler and Middleware Tracking of pharmaceutical products in supply chains Ad-hoc networks for embedded systems with AUTOSAR Linking in Xtext IT-Entrepreneurship Protocol Compiler and Middleware Together with Richard we will implement a middleware for The Wire Protocol in Java, and a protocol compiler. The protocol compiler will read a specification of a TWP protocol and generate code that implements the specified protocol on the basis of our middleware. The compiler will be built upon Xtext . Tracking of pharmaceutical products in supply chains This is my first research activity at the chair of Hasso Plattner , the founder of the HPI . I will investigate the efficient tracing of pharmaceuticals from production to the end-consumer. The goal of such a tracing is the verification of the authenticity of pharmaceuticals. So, if you are at the pharmacy, a pharmaceutical's way from the producer to your hands can be followed completely, and thus preventing you from taking pills produced in some of your neighbour's basement. Actual tracing mechanisms are too slow and I hope to find a way to make them faster. The exact title of my work is: "Algorithms and Data Structures for Data Capturing and Data Retrieval in the Context of EPC Discovery Services". Mobile Ad-hoc networks for embedded systems with AUTOSAR In the seminar Advanced Software Engineering for Embedded Systems I will develop an infrastructure for mobile ad-hoc networks for autonomous robots. The development will be based on AUTOSAR . Linking in Xtext The focus of my work for the seminar Software Design will be the linking-feature of Xtext. I will take a deep dive into the Xtext code to fully understand how the linker works. This should not be a big burden because I am already used to the (almost uncommented ;) )code written by Xtext developers since my google summer of code project in 2008 . After arising from the depths of the Xtext code I will conduct some experiments and thrill the world with Xtext's capabilities :D. IT-Entrepreneurship Last but not least I will write a business plan with Daniel and Toni. The cool thing about this seminar is that we are taught by Rouven Westphal . Rouven is a ... at Hasso Plattner Ventures (HPV) . HPV is a venture capital fund founded by - surpise :) - Hasso Plattner . So, Rouven's every day business is judging business plans; opposed to last year's teacher Prof. Wagner who took a too heavy weight theoretical approach to entrepreneurship - Prof. Wagner basically had no entrpreneurial spirit. Our first business idea is about increasing sales for food retailers. We think of a web platform that gives consumers access to retailers' shelfs in the digital world. Consumers create recipes that can be accessed by other consumers on their mobile devices in the store. The first effect is an increased shopping experience for customers: everything that is needed for a recipe is in one store - they do not have to go to a different store. And here comes the side door for retailers: if a retailer's stock is for instance full of salad that needs to be sold in one day and would be thrown away at the end of the day, the retailer places a special offer as a salad-recipe on the web-platform. This recipe will appear before any other recipe on customer's mobile devices when they enter the store. This has the effect that not only the salad is sold but also the other ingredients like cottage cheese, tomates, bread, and other stuff you need for a good salad. But these days I am thinking more and more about the iPhone as a platform for (IT-)Entrepreneurs. So many fellows are talking about iPhone App development - I never heard so many it-people talking about ONE platform for a basis for (fast) revenue. It's like a gold rush! And if there is a gold rush, invest in gold picks and shovels! But more to that in a later post.]] for those of you spending hours on trying to burn the bootloader on an atmega328 on your arduino , check out this . If you wonder, how to get to the screen shown in the above mentioned post: in avr studio, press the button looking like a microcontroller with the label "AVR": I am using AVRISP mkII and AVR Studio and it works perfectly. bye]] error C2275 illegal use of this type as an expression. check if you have declared a variable after the frist assignment in a function! remember: in c all variables have to be declared before any other statement. stop banging!]] I wanted git to ignore files that I have already added to the repository. Unfortunately, if a file was added, changing .gitignore does not help. But there are two options: git update-index --assume-unchanged [filename(s)] git update-index --skip-worktree [path_to_ignore] the first tells git to ignore changes to single files; the second tells it to ignore all files below a given path .. a complete directory. so far this works and I hope I did not mess something up. regards, s ]] just a redirect to this nice description of how to use value converters in xtext . s ]] world, check out this evaluation on CoreData Performance. s ]] check this out! ]] usepackage{caption} In your caption's you can add the ewline command: egin{figure} centering includegraphics{ } caption{Bla Bla Bla ewline Bla Bla Bla after line break} label{fig:aLabel} end{figure} regards ]] This post shows how I integrated uncrustify into Xtext . At the end of this post you will be able to package uncrustify with your language UI plugin and run uncrustify as part of a MWE2 workflow (the described approach was tested with Xtext 2.0 on Mac OS X 10.7). First, you have to get uncrustify . Unpack it, run ./configure and then make . The binary is located in the src/ folder and is named uncrustify - what a surprise. Create a folder formatting/ in your language's UI plugin. Copy the binary into this folder. To tell uncrustify how to format the code we have to supply it with a config file. A config file for objective c can be found here . Download this file and put it into the formatting/ folder. Besides the binary and a config file we need a shell script that runs uncrustify. Create a file formatSource.sh in formatting/ . The shell script looks like this: #! /bin/sh touch files.txt find . -name "*.[hm]" files.txt while read line; do ./uncrustify_osx -l OC -c ./uncrustify_obj_c.cfg --no-backup $line done files.txt rm files.txt This script will look for *.h and *.m files recursively down from its location, run over them, and format them without creating a backup copy. Now that we have the necessary files for running uncrustify ... oh well ... we must be able to run uncrustify from within java. For executing shell scripts from within a java process - welcome platform dependency - check out my ShellCommandExecutor . This class is also used for making the shell script formatSource.sh executable after copying it to a language project: private void copyFormattingFiles(final IProject project){ Bundle bundle = SystemDslActivator.getInstance().getBundle(); IPath scriptPath = copyFile("formatting/formatSource.sh" , "formatSource.sh", project, bundle); IPath binaryPath = copyFile("formatting/uncrustify_osx", "uncrustify_osx", project, bundle); copyFile("formatting/uncrustify_obj_c.cfg", "uncrustify_obj_c.cfg", project, bundle); //make script and binary executable try { ShellCommandExecutor.execute("chmod", "+x", scriptPath.toString()); ShellCommandExecutor.execute("chmod", "+x", binaryPath.toString()); } catch (Exception e) { //TODO: write to error log } } The above method can be found in this class . The execution of formatSource.sh in a MWE2 workflow component looks like this: public class ObjectiveCFormatter extends org.eclipse.emf.mwe.core.lib.AbstractWorkflowComponent2{ private static final String SCRIPT_PATH = "./formatSource.sh"; @Override protected void invokeInternal(WorkflowContext ctx, ProgressMonitor monitor, Issues issues) { try{ CommandResult cr = ShellCommandExecutor.execute(SCRIPT_PATH, new String[]{}); if (cr.success){ System.out.println("Formatting complete!"); } else{ issues.addError(cr.output); } }catch (Exception e){ issues.addError(e.getMessage()); } } } If you add this component after your objective c generator in your workflow all *.h and *.m files will be formatted as described by the uncrustify objective c config file . regards, steven ]] Xtext based modelling tool chain to model objective c (iPhone, iPad) applications for orderbird I needed to manipulate an Xtext model programmatically and serialize it back to disk. I did encounter some challenges while serializing enums and want to share my experience in this post. Here is a snippet of the grammar I am using for the well known use case of entity modelling: EntityModel: (entities += Entity)* ; Entity: (annotations+=Annotation)* 'entity' name=ID '{' '}' ; Annotation: '@' option=ConfigOption (':' value=ConfigValue)? ; enum ConfigOption: persistency ; enum ConfigValue: CoreData | FMDB ; So, entities can be annotated to determine with which technology they will be stored persistently. At first glance, serialization does not seem to be a hassle. Having an IResourceSetProvider , I can get the model from its XtextResource : @Inject private IResourceSetProvider provider; private EntityModel loadEntityModelFromFile(IFile file) { ResourceSet xrs   = provider.get(file.getProject()); URI uri           = URI.createPlatformResourceURI(file.getFullPath().toString(), true); Resource resource = xrs.getResource(uri, true); EntityModel em    = (EntityModel)resource.getContents().get(0); return em; } Now I can programmatically change the model and then serialize it back to disk by saving it in a XtextResource: private void save(EntityModel em) { ResourceSet xrs  = provider.get(getProject()); XtextResource xr = (XtextResource) xrs.getResource (URI.createPlatformResourceURI(getModelPath(), true) , true); xr.getContents().set(0, em); Map options = new HashMap (); SaveOptions.defaultOptions().addTo(options); xr.save(options); } Serializing this model: @persistency:CoreData entity Foo {} I get: @persistencyentity Foo {} The ConfigOption is missing! Hmmm, why? Xtext somehow assumes the ConfigOption to be transient (not serializable). The Xtext documentation says " The default transient value service considers a model element to be transient if it is unset or equals its default value. " and " By default, EMF returns false for eIsSet(..) if the value equals the default value. " Looking at the generated java code for the ecore meta model, the 'CoreData' literal is defined as the default: /* * @generated */ public class AnnotationImpl extends EObjectImpl implements Annotation { //... protected static final ConfigValue VALUE_EDEFAULT = ConfigValue.CORE_DATA; protected ConfigValue value                       = VALUE_EDEFAULT; //... } In order to tell Xtext which model elements can be considered as (non) transient, an instance of ITransientValueService has to be specified in your DSL's guice runtime module. This seems to be an easy task: Inherit from DefaultTransientValueService and overwrite isTransient(...) to yield the correct semantics: public class DataDslTransientValueService extends DefaultTransientValueService { @Override public boolean isTransient(EObject owner, EStructuralFeature feature, int index) { if (owner instanceof Annotation DataDslPackage.ANNOTATION__VALUE == feature.getFeatureID()) { return false; } return super.isTransient(owner, feature, index); } } ... and hook it into the guice module: public Class bindITransientValueService() { return DataDslTransientValueService.class; } Damn! Still the same errorneous output: @persistencyentity Foo {} A little bit of code archeology and debugging reveals that Xtext has two distinct hierarchies of the ITransientValueService interface. One in the package org.eclipse.xtext.parsetree.reconstr and the other in the package org.eclipse.xtext.serializer.sequencer . My DataDslTransientValueService implemented org.eclipse.xtext.parsetree.reconstr.ITransientValueService. But this does not seem to be sufficient. Thus, I also implemented org.eclipse.xtext.serializer.sequencer.ITransientValueService: @SuppressWarnings("restriction") public class SequencerTransientValueService extends TransientValueService { public ValueTransient isValueTransient(EObject semanticObject, EStructuralFeature feature) { if (semanticObject instanceof Annotation DataDslPackage.ANNOTATION__VALUE == feature.getFeatureID()) { return ValueTransient.NO; } return super.isValueTransient(semanticObject, feature); } } My DSL's guice runtime module contains these two bindings for ITransientValueService: public Class bindITransientValueService() { return DataDslTransientValueService.class; } public Class bindITransientValueService2() { return SequencerTransientValueService.class; } And finally the serialization yields the correct result! As you might have noticed I annotated the SequencerTransientValueService with @SuppressWarnings("restriction") . The class org.eclipse.xtext.serializer.sequencer.TransientValueService seems not be intended for public use. But obviously it is required to get the serialization to work correctly. At the time of writing this post, I also realized that my grammar's enum ConfigOption only has one literal that is defined as default and should thus not be serialized by default. But in my implementations of the two ITransientValueService interfaces I only specified ConfigValue to be non-transient. However, ConfigOption is serialized without adding the corresponding semantics to the implementations of the ITransientValueService. Maybe this is due to the Annotation's option attribute not being optional in the grammar as the value attribute is. And maybe I should study the Xtext documentation in more detail. Maybe .. Regards, steven ]] During christmas, I had a conversation with my uncle about orderbird which started like this: my uncle: "Why should someone invest in orderbird? orderbird is just a Point of Sale (POS) system !" me: "Because its not just a POS system. It will be THE platform provider for the gastronomy." my uncle: "Platform Provider? Are you going to produce oil rigs?" me: " ... No ... and ... No. orderbird will bring together all stakeholders relevant to gastronomy: gastronomists, guests,  suppliers. All of them will do their daily business with orderbird: Gastronomists run their restaurants with orderbird. Guests reserve tables, place orders, and pay with orderbird. For an optimal supply chain, suppliers and gastronomists work hand-in-hand with orderbird. " .. Ok, Ok, .. I must admit that the last elevator-pitch-part was added to make the dialog more appealing. Seriously, orderbird's business model can be classified as a Multi-Sided Platform (MSP) . It does not strictly follow the MSP pattern as defined in BMG . Here's why: Using a plain MSP business model, a MSP-company can hardly run profitabel without having customers that cover ALL customer segments that make up the MSP. Related to orderbird, this means that orderbird's business model would not work if orderbird only had gastronomists, only had guests, only had gastronomists and suppliers, and so forth. This is only partially true. Ok, if orderbird only had guests and suppliers, the business model should surely be adapted. But in some settings it can be built and scaled incrementally. While bringing one sutomer segment onto the platform, profits can be made without having to wait for another customer segment to enter the platform. Consider the current state of the evolution of orderbird's business model. orderbird has entered the german gastronomy market successfully having the 100st customer reachable at the end of the beta phase. Until a critical mass is reached, orderbird will improve its POS system to help gastronomists getting even more out of their business and tapping on the revenue streams generated from its POS system. While creating more value for gastronomists, orderbird is sketching and evaluating market entry strategies for bringing guests onto their platform. If a critical mass of customers is on the platform, the MSP model starts kicking! While offering guests an uncomplicated ordering and restaurant experience, gastronomists can profit from a better capacity utilization. And orderbird ... orderbird is tapping on a new revenue stream: guest ordering. For every placed order orderbird will receive a turnover percentage. If guests pay via orderbird, a turnover percentage on these transactions is imaginable, too. Besides the synergies among gastronomists and guests, the platform allows for better integration of gastronomists and supplier operations. Gastronomists will be able to choose from a variety of suppliers of beverages, food, and other goods they need to run their business. Suppliers can offer their products and services to a much broader audience. Let's sum things up. If you thought about investing in orderbird, do not base your thoughts and calculations on the assumption that you will invest in a company that simply delivers a POS system. orderbird's business model follows the pattern of a Multi-sided Platform (MSP): orderbird will bring together all relevant gastronomy stakeholders. This consolidation of stakeholders will give orderbird the possibility to get a share on multiple gastronomy related markets: POS systems, guest orders and reservations, guest payments, and supply chains. The orderbird platform will be THE marketplace for the gastronomy. Furthermore, what makes orderbird unique besides its business model is its team. The founder's talent and experience ranges from a deep understanding of the gastronomy market, to the planning and implementation of marketing and financial strategies, to a customer focussed development of software products. The founders are supported by a great team of software engineers, sales support people, designers, partners and board of directors. The spirit and success of orderbird is reflected by the awards we earned so far. I never felt so much enthusiasm and energy in a company!! Rock on!]] if you ask yourself how to open the Eclipse Properties View (PropertySheet) programmatically, I have an answer: PlatformUI.getWorkbench(). getActiveWorkbenchWindow(). getActivePage(). showView("org.eclipse.ui.views.PropertySheet"); "org.eclipse.ui.views.PropertySheet" is the view id of the Eclipse PropertyView (PropertySheet). regards, steven]] orderbird to analyze our code for potential thread safety issues. This post does not cover tools or strategies for multi-threaded programming but will point you to sources that cover this topic. 1) Threading Basics When your app is started iOS creates a new process and memory is allocated for this app-process. In simplified terms, the memory of an app-process consists of three blocks (A more detailed explanation of the memory layout of C programs can be found here ): The program memory stores the machine instructions your objective c code has been compiled to. Which instruction is executed next is indicated by the Instruction Pointer (IP). The heap stores objects which are created with [... alloc] init] . The stack is the memory area that is used for method invocations. Methods store things like their parameters and local variables on the stack. By default an app-process consists of one thread - the main thread. If your iOS app uses multiple threads, all threads share the program memory and the heap but each thread has its own instruction pointer and stack . This means that each thread has its own program flow and if a method is called on one thread, the parameters and local variables cannot be seen be any other thread. But the objects that are created on the heap can be seen, accessed, and manipulated by all threads . 2) Experiment Now, let us start our little experiment. Open Xcode and create a new project (choose the template "Empty Application"). Create a class named "FooClass" as depicted in the following: @interface FooClass {} @property (nonatomic, assign) NSUInteger value; - (void)doIt; @end @implementation FooClass @synthesize value; - (void)doIt { self.value = 0; for (int i = 0; i 100000; ++i) { self.value = i; } NSLog(@"after execution: %d (%@)", self.value, [NSThread currentThread]); } @end This class has an integer property named value that is incremented 100000 times in the doIt method. At the end of doIt self.value is logged to the console with the information on which thread doIt is executed. In order to execute the doIt method, create a method called _startExperiment in your project's AppDelegate and call this method in its application:didFinishLaunchingWithOptions: method: - (void)_startExperiment { FooClass *foo = [[FooClass alloc] init]; [foo doIt]; [foo release]; } - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { // ... [self _startExperiment]; return YES; } If we run our experiment by starting the iOS simulator (cmd + R), the _startExperiment method is called, an instance of FooClass is created on the heap and doIt is called on this instance. As expected, the console log (shift + cmd + c) shows 99999 for self.value . Nothing special so far: doIt is invoked on the main thread and it behaves as expected. 3) Thread Safety Let us execute doIt in parallel on multiple threads: - (void)_startExperiment { FooClass *foo = [[FooClass alloc] init]; dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0); for (int i = 0; i 4; ++i) { dispatch_async(queue, ^{ [foo doIt]; }); } [foo release]; } If you execute this multi-threaded version of _startExperiment , you will get an output like this (the concrete values will differ from the output that I am posting): after execution: 19851 (NSThread: 0x6b29bd0{name = (null), num = 3}) after execution: 91396 (NSThread: 0x6b298f0{name = (null), num = 4}) after execution: 99999 (NSThread: 0x6a288a0{name = (null), num = 5}) after execution: 99999 (NSThread: 0x6b2a6f0{name = (null), num = 6}) Ouch ... not on all threads self.value is 99999 as we expected (If your execution produces a correct result - on all threads self.value is 99999 - re-execute it until an incorrect result is produced. It definitely will.). Why do not all threads produce a correct result? Well, because our code is not thread safe. Your code is thread safe if it behaves in the same way in a multi-threaded environment as it does in a single-threaded environment. As we observed above, the method doIt is not thread safe because it does not produce the same result in a multi-threaded environment as it does in a single-threaded environment. But what is the reason for this behavior? As stated in the beginning, each thread has its own instruction pointer (IP) and stack but all threads share the complete heap . Since the instance of FooClass is allocated on the heap and thus shared among all threads, the threads interfere while executing doIt . Let's take a closer  look at this interference. We consider the execution of the doIt method on two threads Thread1 and Thread2 : The instruction pointer (IP) of Thread1 points to the logging of self.value but did not execute the logging yet. At this point self.value is set to 99999. Now, Thread2 continues executing doIt . Its IP points to the assignment inside the for loop. We assume that self.value is set to 91396 in the for-loop on Thread2 . Uups. If Thread1 continues execution, self.value is not set to 99999 anymore but to 91396. Thread1 logs self.value and 91396 is printed. Since doIt does not prevent threads from interfering with each other while executing it, its implementation is not thread safe. One possible way to make doIt thread safe is to synchronize its body using the @synchronized compiler directive : - (void)doIt { @synchronized(self) { self.value = 0; for (int i = 0; i 100000; ++i) { self.value = i; } NSLog(@"after execution: %d (%@)", self.value, [NSThread currentThread]); } } Using the @synchronized directive, each thread gets exclusive access to self in doIt . Note that the threads cannot run in parallel anymore while executing doIt because the @synchronized directive covers the complete method body. Another way of syncing access to  shared state is to use Grand Central Dispatch (GCD) . 4) How to identify not thread safe code The experiment that I used to explain thread safety is an oversimplification of reality. In reality, you have already written your code, made some pieces run on background threads and from time to time your app is not behaving as expected. It freezes. It crashes. And you are not able to reproduce these issues. The main cause for threading issues is shared or global state. Multiple objects access a global variable, share the same object on the heap, or write to the same persistent store. In our little experiment the state that is shared among multiple threads is self respectively self.value . The identification of shared state is quite simple in our experiment but in a real world scenario it is quite hard to go through all your classes and identify methods that manipulate shared or global state. In order to make things easier I have written a convenient tool that identifies methods that are called from multiple threads. If I have the information which methods are called from multiple threads, I take a closer look at these methods. If such a method manipulates shared or global state, I make up a synchronization strategy for the state that is manipulated by this and other methods. In the following I will outline the core idea of this tool. The tool consists of four classes: the instances of MultiThreadingAnalysis record calls to methods on a specific thread, the classes ThreadingTrace and MethodExecution represent the result of conducting an analysis with MultiThreadingAnalysis , and the class MultiThreadingAnalysisHook is used to hook into an object and trace all method calls to this object. The class MultiThreadingAnalysis offers two methods: recordCallToMethod:ofClass:onThread: which records on which thread a method has been called. threadingTraceOfLastApplicationRun which should be called after the analysis has finished. @interface MultiThreadingAnalysis : NSObject - (void)recordCallToMethod:(NSString*)methodName ofClass:(NSString*)className onThread:(NSString*)threadID; - (ThreadingTrace*) threadingTraceOfLastApplicationRun; @end The result of a multi-threading analysis is an instance of ThreadingTrace . It consists of a set of MethodExecution instances each of which represents the execution of a method on a specific thread: /* * An instance of this class captures * which methods of which classes have been * called on which threads. */ @interface ThreadingTrace : NSObject /* * Set of MethodExecution */ @property (nonatomic, readonly) NSSet *methodExecutions; - (void)addMethodExecution:(MethodExecution*)methodExec; @end /* * An instance of this class represents a call * to a method of a specific class on a thread * with a specific threadID. */ @interface MethodExecution : NSObject @property (nonatomic, retain) NSString *methodName; @property (nonatomic, retain) NSString *className; @property (nonatomic, retain) NSString *threadID; @end In order to make the recording of method calls as convenient as possible I am using NSProxy to hook into method calls of an object. The class MultiThreadingAnalysisHook inherits from NSProxy and intercepts all calls to a target object in its forwardInvocation: method. Before forwarding a method call to the target object it records the call by using an instance of MultiThreadingAnalysis . @interface MultiThreadingAnalysisHook : NSProxy @property (nonatomic, retain) id target; @property (nonatomic, retain) MultiThreadingAnalysis *analysis; @end @implementation MultiThreadingAnalysisHook -(void)forwardInvocation:(NSInvocation*)anInvocation { [self.analysis recordCallToMethod:NSStringFromSelector([anInvocation selector]) ofClass:NSStringFromClass([self.target class]) onThread:[NSString stringWithFormat:@"%d", [NSThread currentThread]]]; [anInvocation invokeWithTarget:self.target]; } @end With the MultiThreadingAnalysisHook at your hands you can hook the multi-threading analysis into your code as proposed in the following. Create a private method _withThreadingAnalysis in the class that you want to analyze. This method creates an instance of MultiThreadingAnalysisHook and sets its target to self . In your designated initializer return the result of invoking _withThreadingAnalysis . The instance of MultiThreadingAnalysisHook will transparently wrap around self and record all calls to self without the need to change any other code outside of the class which you are analyzing. @implementation YourClass - (id)init { //... do init stuff here return [self _withThreadingAnalysis]; } - (id)_withThreadingAnalysis { MultiThreadingAnalysisHook *hook = [[MultiThreadingAnalysisHook alloc] init]; hook.target = self; return hook; } @end After you have installed the MultiThreadingAnalysis via the MultiThreadingAnalysisHook you can call threadingTraceOfLastApplicationRun on MultiThreadingAnalysis to get the trace and analyze respectively visualize it. A simple way of visualizing a trace is to produce a text file from it that looks like this: begin threading analysis for class FooClass method doIt (_ MultiThreadAccess _) method init (_SingleThreadAccess_) If a method is accessed from multiple threads (has the tag _MultiThreadAccess_), you can take a closer look at this method to check if it manipulates shared or global state and implement a suitable thread  synchronization strategy for the manipulated state. 5) Wrap up Your code is thread safe if it has the same behavior in a multi-threaded environment as it has in a single-threaded one. The reason for code not to be thread safe is the manipulation of shared or global state by multiple threads. Shared or global state can be a globally available persistent store, a singleton that is accessed  from multiple objects, or a global variable. The identification of methods that are accessed from multiple threads can be helpful to discover unsynchronized access to global or shared state and to devise a suitable synchronization strategy. The identification of such methods can be automated by leveraging the interception facilities of NSProxy , the recording of method calls, and the visualization of the recorded method calls. ]] Hi folks , if you ever wanted to found a start-up and are still looking for some advice, I recommend the following three books that helped me to sharpen my understanding of a start-up's nature and how to run it. The first one is Business Model Generation: A Handbook for Visionaries, Game Changers, and Challengers . This book will help you to define your initial product vision in terms of a business model. This books introduces you to a tool called the Business Model Canvas (BMC). The BMC will guide you step-by-step through the creation of a business model. Once you have defined your business model with the help of the BMC, you will find it much easier to communicate your vision to others and have a good starting point for your start-up. The second recommended reading is The Lean Startup by Eric Ries. Eric introduces you to a methodology - the Lean Startup Methodology -  which describes how you should run your start-up. While the Business Model Canvas is used to define your start-up's vision, the Lean Startup Methodology describes how you should implement this vision. It will help you in managing your precious time and money before running out of them. If you have never run a start-up before, you will find a perfect coach in Eric. Ash Maurya combines the Business Model Canvas and the Lean Startup Methodology in his book Running Lean . He presents an adopted version of the Business Model Canvas called the Lean Canvas and describes how you should apply the Lean Startup Methodology in conjunction with the Lean Canvas . Whilst the two previous books take a theoretical approach, this book takes a very practical approach. Ash takes you through the development of one of his start-ups step-by-step. He defines a Lean Canvas and walks you through the complete implementation of an initial product vision. If you have read "The Lean Startup" and cannot wait to apply the Lean Startup Methodology , read this book before you get your hands dirty. ]] 